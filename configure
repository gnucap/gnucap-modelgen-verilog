#!/bin/sh
# top level configure
gnucap_conf=gnucap-conf


echo -n '# ' > config.log
date >> config.log
echo $0 "$@" >> config.log

#-------------  transition
# stale. from previous snapshot.
find . -name makefile -delete
#-------------  Stuff added to enable --prefix  --------------
prefix=/usr/local
prefix_given=no
srcdir_given=no
top_srcdir_given=no
top_builddir_given=no # this is where gnucap was built.
preset=
force_in_tree=no
srcdir=$(dirname $0)
top_srcdir=$(dirname $0)
submodules=

while [ 0 -ne $# ]; do
	case "$1" in
		--prefix=*)
			  prefix=${1#--prefix=}
			  prefix_given=yes
			  ;;
		--enable-debug)
			  preset=Debug
			  ;;
		--enable-submodules)
			  submodules="yes"
			  ;;
		--disable-submodules)
			  submodules="no"
			  ;;
		--srcdir=*)
			  srcdir=${1#--srcdir=}
			  srcdir_given=yes
			  ;;
		--top-srcdir=*)
			  top_srcdir=${1#--top-srcdir=}
			  top_srcdir_given=yes
			  ;;
		--top-builddir=*)
			  top_builddir=${1#--top-builddir=}
			  top_builddir_given=yes
			  ;;
		--force-in-tree)
			  force_in_tree=yes
			  ;;
		--preset=*)
			  preset=${1#--preset=}
			  ;;
		*)
			echo unrecognised: "$1"
			;;
	esac
	shift
done
#----------------------------------------------------------------
if [ x$top_builddir_given = xno ]; then
	: #OK
elif [ "$top_builddir" = "${top_builddir%~*}" ]; then
	: #OK
else
	top_builddir=${HOME}/${top_builddir#\~}
fi
#----------------------------------------------------------------
# # delegate. later.
# if [ $top_srcdir_given = yes ]; then
# 	exec $top_srcdir/configure --top-srcdir="$top_srcdir" --prefix="prefix" --srcdir="$srcdir" --preset="${preset}"
# else
# 	:
# fi
#----------------------------------------------------------------
# abs_srcdir=$(cd $srcdir; pwd)
if [ -f $srcdir/NEWS ]; then
	: # OK
elif [ $srcdir_given = "yes" ]; then
	: # OK
else
	echo could not find source directory
	exit 1
fi
#----------------------------------------------------------------
MAKE1_SUBDIRS=$(grep -m 1 SUBDIRS $srcdir/MakeList | sed 's/^.*= //g')
SUBDIRS="${MAKE1_SUBDIRS}"
#----------------------------------------------------------------
# echo \# created by $PWD/$0. do not edit >Makefile
# echo \#------------------------------------------------------------------------ >>Makefile
# echo "srcdir = $srcdir" >> Makefile
# echo "VPATH = \${srcdir}" >> Makefile
# echo 'include ${srcdir}/MakeList' >> Makefile
# cat $srcdir/Makefile.in >> Makefile
#----------------------------------------------------------------
# LDFLAGS="-rdynamic"
#------------------------------------------------------------------------
cat <<CAT_EOF >Make.sys
#------------------------------------------------------------------------
CXX = g++
TARGET_EXT =


.SUFFIXES : .o .cc
#------------------------------------------------------------------------
CAT_EOF

echo \# created by $PWD/$0. do not edit >MakeConf
echo \#------------------------------------------------------------------------ >>MakeConf
echo "CXX = c++" >>MakeConf
echo "PREFIX = " $prefix >>MakeConf

if [ x$top_builddir_given = xno ]; then
#	echo "c.o:; \$(CXX) \$(CCFLAGS) -c \$< # configure/MakeConf" >> MakeConf

	echo 'CXX = $(shell $(GNUCAP_CONF) --cxx)' >> MakeConf

	echo 'GNUCAP_CONF = gnucap-conf' >> MakeConf
	echo 'GNUCAP_CPPFLAGS = $(shell $(GNUCAP_CONF) --cppflags) -DPIC' >> MakeConf
	echo 'GNUCAP_CXXFLAGS = $(shell $(GNUCAP_CONF) --cxxflags)' >> MakeConf
	echo 'GNUCAP_LDFLAGS = $(shell $(GNUCAP_CONF) --ldflags)' >> MakeConf
	echo 'GNUCAP_LIBDIR = $(shell $(GNUCAP_CONF) --libdir)' >> MakeConf
	echo 'GNUCAP_LIBS = $(shell $(GNUCAP_CONF) --libs)' >> MakeConf
	echo 'GNUCAP_PKGLIBDIR = $(shell $(GNUCAP_CONF) --pkglibdir)' >> MakeConf
	echo 'GNUCAP_INCLUDEDIR = $(shell $(GNUCAP_CONF) --includedir)' >> MakeConf
	echo 'GNUCAP_EXEC_PREFIX = $(shell $(GNUCAP_CONF) --exec-prefix)' >> MakeConf

	echo "LDFLAGS = $LDFLAGS "`${gnucap_conf} --ldflags` >>MakeConf
	echo "INCLUDE = -I ${srcdir}/../src" >> MakeConf

else
	echo "LDFLAGS = $LDFLAGS -L${top_builddir}/lib" >>MakeConf
	echo "GNUCAP_LIBDIR = ${top_builddir}/lib" >>MakeConf

	if [ "${top_srcdir%.*}" = "${top_srcdir}" ]; then
		echo "top_srcdir = ${top_srcdir}# absolute" >> MakeConf
	else
		echo "top_srcdir = ../${top_srcdir}# relative" >> MakeConf
	fi
	echo "GNUCAP_INCLUDEDIR = \${top_srcdir}/include" >> MakeConf
	echo "INCLUDE = -I ../${srcdir}/src -I \${GNUCAP_INCLUDEDIR}" >> MakeConf
fi

if [ "$preset" ]; then
	echo "PRESET = ${preset}" >>MakeConf
	echo "PRESET_CONF_FILE = \${GNUCAP_INCLUDEDIR}/MakeConf.\${PRESET}" >> MakeConf
	echo 'include ${PRESET_CONF_FILE}' >> MakeConf
else
	: # not ready yet
fi

cat Make.sys >>MakeConf
rm Make.sys
#------------------------------------------------------------------------
case $srcdir in
	[\\/]* | ?:[\\/]*)
		top_srcdir_="$srcdir"
		;;
	\.)
		top_srcdir_=".."
		;;
	*)
		top_srcdir_="../$srcdir"
		;;
esac
#------------------------------------------------------------------------
out_of_tree=yes
top_srcdir_=top_srcdir
case $srcdir in
	[\\/]* | ?:[\\/]*)
		top_srcdir_="$srcdir"
		;;
	\.)
		top_srcdir_=".."
		out_of_tree=no
		;;
	*)
		top_srcdir_="../$srcdir"
		;;
esac
#----------------------------------------------------------------
sub_makefile() {
	m="$1"
	echo sub_makefile $1
	echo \# created by $0 do not edit >$1
	echo \#------------------------------------------------------------------------ >> $1
	echo "top_srcdir = $top_srcdir" >> $1
	echo "srcdir = $srcdir" >> $1
#	echo "srcdir = $top_srcdir_/$1" >> $m # BUG
	echo "VPATH = \${srcdir}" >> $1
	echo "include \${srcdir}/MakeList" >> $1
	echo "include ../MakeConf" >> $1
	echo "include \${srcdir}/../MakeBase" >> $1
	[ -f ${srcdir}/Make.depend ] && \
	echo "include \${srcdir}/Make.depend" >> $1
}
#------------------------------------------------------------------------
if [ -f $srcdir/Makefile.in ]; then
	echo \# created by $PWD/$0. do not edit >Makefile
	echo \#------------------------------------------------------------------------ >>Makefile
	echo "srcdir = $srcdir" >> Makefile
	echo "VPATH = \${srcdir}" >> Makefile
	# echo "SUBMODULES = ${SUBMODULES}" >> Makefile
	cat $srcdir/Makefile.in >> Makefile
else
	sub_makefile Makefile
fi
#------------------------------------------------------------------------
sub_configure() {
	echo sub_configure $1
	m="$1/Makefile"
	if [ "$top_srcdir_" = ".." ]; then
		srcdir_=".";
	else
		srcdir_="$top_srcdir_/$1";
	fi
	echo '#stub. need to run configure first' > $m
	echo "srcdir = $srcdir_" >> $m
	echo "prefix = $prefix" >> $m
	echo '%: ; ${srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE} $@' >> $m
	echo 'all: ; ${srcdir}/configure --prefix="${prefix}" --srcdir="${srcdir}" && ${MAKE}' >> $m
	echo '.PHONY: all' >> $m
}
#------------------------------------------------------------------------
sub_configure() {
	m="$1/Makefile"
	echo creating $m
	if [ "$top_srcdir_" = ".." ]; then
		srcdir_=".";
	else
		srcdir_="$top_srcdir_/$1";
	fi
	echo '#stub. need to run configure first' > $m
	echo "top_srcdir = $top_srcdir_" >> $m
	echo "top_builddir = .." >> $m
	echo "srcdir = $srcdir_" >> $m
	echo "prefix = $prefix" >> $m
	echo 'CONFIGURE_ARGS = --prefix="${prefix}" --srcdir="${srcdir}" \\' >> $m
	echo '                 --top-builddir="${top_builddir}" --top-srcdir="${top_srcdir}"' >> $m

	if [ -f $srcdir/$i/configure ]; then
		echo 'CONFIGURE = "${srcdir}/configure"' >> $m
	else
		echo 'CONFIGURE = "${top_srcdir}/configure"' >> $m
	fi

	echo '%: ; ${CONFIGURE} ${CONFIGURE_ARGS} && ${MAKE} $@' >> $m
	echo 'all: ; ${CONFIGURE} ${CONFIGURE_ARGS} && ${MAKE}' >> $m
	echo '.PHONY: all' >> $m
}
#------------------------------------------------------------------------
for i in ${SUBDIRS}; do
	mkdir -p $i;
	sub_configure $i;
done
#------------------------------------------------------------------------
exit 0
