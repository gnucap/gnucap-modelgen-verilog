/*$Id: mg_out_h.cc,v 26.134 2009/11/29 03:44:57 al Exp $ -*- C++ -*-
 * Copyright (C) 2001 Albert Davis
 * Author: Albert Davis <aldavis@gnu.org>
 *
 * This file is part of "Gnucap", the Gnu Circuit Analysis Package
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
 * 02110-1301, USA.
 */
//testing=script 2006.11.01
#include "mg_out.h"
/*--------------------------------------------------------------------------*/
static void make_header(std::ostream& out, const File& in,
			const std::string& dump_name)
{
  out << in.head()
      << "/* This file is automatically generated. DO NOT EDIT */\n"
    "#ifndef " << to_upper(dump_name) << "_H_INCLUDED\n"
    "#define " << to_upper(dump_name) << "_H_INCLUDED\n"
      << in.h_headers() <<
    "#include \"u_sdp.h\"\n"
    "#include \"e_node.h\"\n"
    "#include \"e_subckt.h\"\n"
    "#include \"e_model.h\"\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
/*--------------------------------------------------------------------------*/
#if 0
static void make_model(std::ostream& out, const Model& m)
{
  std::string class_name = "MODEL_" + m.name().to_string();
  out <<
    "class " << class_name << "\n"
    "  :public MODEL_" << m.inherit() << "{\n"
    "protected:\n"
    "  explicit " << class_name << "(const " << class_name << "& p);\n"
    "public:\n"
    "  explicit " << class_name << "(const BASE_SUBCKT*);\n"
    "  ~" << class_name << "() {--_count;}\n"
    "public: // override virtual\n"
    "  std::string dev_type()const;\n"
    "  void      set_dev_type(const std::string& nt);\n"
    "  CARD*     clone()const {return new " << class_name << "(*this);}\n"
    "  void      precalc_first();\n"
    "  void      precalc_last();\n"
    "  SDP_CARD* new_sdp(COMMON_COMPONENT* c)const;\n"
    "  void      set_param_by_index(int, std::string&, int);\n"
    "  bool      param_is_printable(int)const;\n"
    "  std::string param_name(int)const;\n"
    "  std::string param_name(int,int)const;\n"
    "  std::string param_value(int)const;\n"
    "  int param_count()const {return (" << 1 + m.independent().override().size()
		+ 4 * m.size_dependent().raw().size() + m.independent().raw().size();
  if (!m.hide_base()) {
    out << " + MODEL_" << m.inherit() << "::param_count());}\n";
  }else{
    out << ");}\n";
  }
  out <<
    "  bool      is_valid(const COMPONENT*)const;\n"
    "  void      tr_eval(COMPONENT*)const;\n"
    "public: // not virtual\n"
    "  static int count() {return _count;}\n"
    "private: // strictly internal\n";
  out <<
    "  static int _count;\n"
    "public: // input parameters\n";
  for (Parameter_1_List::const_iterator
       p = m.size_dependent().raw().begin();
       p != m.size_dependent().raw().end();
       ++p) {
    out << "  " << "SDP" << " " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
  for (Parameter_1_List::const_iterator
       p = m.independent().raw().begin();
       p != m.independent().raw().end();
       ++p) {
    out << "  PARAMETER<" << (**p).type() << "> " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
  out << "public: // calculated parameters\n";
  for (Parameter_1_List::const_iterator
       p = m.independent().calculated().begin();
       p != m.independent().calculated().end();
       ++p) {
    out << "  " << (**p).type() << " " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
  out << "};\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
#endif
/*--------------------------------------------------------------------------*/
static void declare_deriv_enum(std::ostream& o, const Module& m)
{
  std::string comma = "";

  o << ind << "enum {";
  for (auto nn : m.probes()){
    o << comma << "d_" << nn.second->name();
    comma = ", ";
  }
  o << ind << "};\n";
}
/*--------------------------------------------------------------------------*/
static void declare_ddouble(std::ostream& o, Module const& m)
{
  size_t np = m.probes().size();
  o << ind << "typedef ddouble_<"<<np<<"> ddouble;\n";
  declare_deriv_enum(o, m);
}
/*--------------------------------------------------------------------------*/
static void make_common(std::ostream& o, const Module& m)
{
  std::string class_name = "COMMON_" + m.identifier().to_string();
  o << "class MOD_" << m.identifier() << ";\n";
  o << "class " << class_name << " :public COMMON_COMPONENT{\n";
  o << "public:\n";
  declare_ddouble(o, m);
  o << "public:\n"
    "  explicit " << class_name << "(const " << class_name << "& p);\n"
    "  explicit " << class_name << "(int c=0);\n"
    "           ~" << class_name << "();\n"
    "  bool     operator==(const COMMON_COMPONENT&)const;\n"
    "  COMMON_COMPONENT* clone()const {return new "<<class_name<<"(*this);}\n"
    "  void     set_param_by_index(int, std::string&, int);\n"
    "  bool     param_is_printable(int)const;\n"
    "  std::string param_name(int)const;\n"
    "  std::string param_name(int,int)const;\n"
    "  std::string param_value(int)const;\n"
    "  int param_count()const {return (" 
	     << m.parameters().size()
	     << " + COMMON_COMPONENT::param_count());}\n"
    "  void     precalc_first(const CARD_LIST*);\n"
    "  void     expand(const COMPONENT*);\n"
    "  void     precalc_last(const CARD_LIST*);\n"
    "  void tr_eval_analog(MOD_" << m.identifier() << "*)const;\n"
    "  std::string name()const {itested();return \"" << m.identifier() << "\";}\n"
//    "  const SDP_CARD* sdp()const {return _sdp;}\n"
//    "  bool     has_sdp()const {untested();return _sdp;}\n"
    "  static int  count() {return _count;}\n"
    "private: // strictly internal\n"
    "  static int _count;\n"
    "public: // input parameters\n";
  for (Parameter_2_List::const_iterator
       p = m.parameters().begin();
       p != m.parameters().end();
       ++p) {
    o << "  PARAMETER<" << (**p).type() << "> " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
//  out <<
//    "public: // calculated parameters\n"
//    "  SDP_CARD* _sdp;\n";
//  for (Parameter_1_List::const_iterator
//       p = d.common().calculated().begin();
//       p != d.common().calculated().end();
//       ++p) {
//    out << "  " << (**p).type() << " " << (**p).code_name()
//	<< ";\t// " << (**p).comment() << '\n';
//  }
//  out << "public: // attached commons\n";
//  for (Args_List::const_iterator
//       p = d.circuit().args_list().begin();
//       p != d.circuit().args_list().end();
//       ++p) {
//    out << "  COMMON_COMPONENT* _" << (**p).name() << ";\n";
//  }
  o << "};\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
/*--------------------------------------------------------------------------*/
static void make_module(std::ostream& o, const Module& m)
{
  std::string class_name = "MOD_" + m.identifier().to_string();
  std::string base_name = baseclass(m);
  std::string common_name = "COMMON_" + m.identifier().to_string();
  o << "class " << class_name << " : public " << base_name << " {\n";
  o << "private:\n"
    << ind << "static int _count;\n";
  o << "public:\n";
  declare_ddouble(o, m);
  o << "private: // data\n";
  size_t total_nodes = m.nodes().size() + 10;
  // circuit().req_nodes().size() + circuit().opt_nodes().size() + circuit().local_nodes().size();
  o << ind << "node_t _nodes[" << total_nodes << "];\n";
  o << "private: // construct\n";
  o << ind << "explicit MOD_" << m.identifier() << "(MOD_" << m.identifier() << " const&);\n";
  o << "public:\n";
  o << ind << "explicit MOD_" << m.identifier() << "(); // : "<< base_name <<"() { _n = _nodes; }\n";
  o << ind << "CARD* clone()const override { return new MOD_" << m.identifier() << "(*this); }\n";
  o << "private: // overrides\n"
	 << ind << "void      precalc_first() {COMPONENT::precalc_first(); if(subckt()) subckt()->precalc_first();}\n"
	 << ind << "void      expand();\n"
    //<< ind << "void      precalc_last()  {COMPONENT::precalc_last(); assert(subckt()); subckt()->precalc_last();}\n"
    << ind << "void      precalc_last()  {COMPONENT::precalc_last(); if(subckt()) subckt()->precalc_last();}\n"
    << ind << "//void    map_nodes();         //BASE_SUBCKT\n"
    << ind << "//void    tr_begin();          //BASE_SUBCKT\n"
    << ind << "//void    tr_restore();        //BASE_SUBCKT\n";
  if (m.tr_eval().is_empty()) {
    o << ind << "//void    dc_advance();        //BASE_SUBCKT\n"
      << ind << "//void    tr_advance();        //BASE_SUBCKT\n"
      << ind << "//void    tr_regress();        //BASE_SUBCKT\n"
      << ind << "//bool    tr_needs_eval()const;//BASE_SUBCKT\n"
      << ind << "//void    tr_queue_eval();     //BASE_SUBCKT\n"
      << ind << "//bool    do_tr();             //BASE_SUBCKT\n";
  }else{
    o << ind << "void      dc_advance() {set_not_converged(); BASE_SUBCKT::dc_advance();}\n"
      << ind << "void      tr_advance() {set_not_converged(); BASE_SUBCKT::tr_advance();}\n"
      << ind << "void      tr_regress() {set_not_converged(); BASE_SUBCKT::tr_regress();}\n"
      << ind << "bool      tr_needs_eval()const;\n"
      << ind << "void      tr_queue_eval()      {if(tr_needs_eval()){q_eval();}}\n"
      << ind << "bool      do_tr();\n";
  }
  o << ind << "double tr_probe_num(std::string const&) const;\n";
  o << ind << "std::string dev_type()const override {return \"demo\";}\n";
  o << ind << "int max_nodes()const override {return 4;}\n";
  o << ind << "int min_nodes()const override {return 2;}\n";
  o << ind << "std::string value_name()const override {untested(); return \"\";}\n";
  o << ind << "bool print_type_in_spice()const override {untested(); return false;}\n";
  o << ind << "std::string port_name(int i)const override {\n";
  o << ind << ind << "assert(i >= 0);\n";
  o << ind << ind << "assert(i < 4);\n";
  o << ind << ind << "static std::string names[] = {\"a\", \"b\", \"c\", \"d\", \"\"};\n";
  o << ind << ind << "return names[i];\n";
  o << ind << "}\n";
  o << "private: // impl\n";
  // o << ind << "void clear_branch_contributions();\n";
  o << "/* ========== */\n";

  o << "private: // data\n";
  o << ind << "ddouble _branches;\n";
  for(auto x : m.branches()){
    assert(x.second);
    o << ind << "ddouble _branch" << x.second->name() << ";\n";
  }

  std::string comma="";
  o << "private: // node list\n";
  o << ind << "enum {";
  for (auto nn : m.nodes()){ // BUG: array?
    o << comma << "n_" << nn.second->name();
    comma = ", ";
  }
  o << ind << "};\n";
  o << "private: // probe list\n";

  for(auto x : m.probes()){
    assert(x.second);
    o << ind << "double _" << x.second->name() << ";\n";
  }

  o << ind << "bool tr_needs_eval() const override{ return true; }\n";
  o << ind << "bool do_tr() override; // AnalogBlock\n";
  o << ind << "void read_voltages();\n";
  o << ind << "void clear_branch_contributions(){\n";
  for(auto x : m.branches()){
    assert(x.second);
    o << ind << ind << "_branch" << x.second->name() << ".clear();\n";
  }
  o << ind << "}\n";
  o << ind << "friend class " << common_name << ";\n";

  o << "}m; /* MOD_" << m.identifier() << " */\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
/*--------------------------------------------------------------------------*/
void make_cc_decl(std::ostream& out, const Module& d)
{
	make_common(out, d);
	make_module(out, d);
}
/*--------------------------------------------------------------------------*/
static void make_device(std::ostream& out, const Device& d)
{
  std::string class_name = "DEV_" + d.name().to_string();
  out <<
    "class " << class_name << " : public BASE_SUBCKT {\n"
    "private:\n"
    "  explicit " << class_name << "(const " << class_name << "& p);\n"
    "public:\n"
    "  explicit " << class_name << "();\n"
    "           ~" << class_name << "() {--_count;}\n"
    "private: // override virtual\n"
    "  char      id_letter()const     {untested();return '" << d.id_letter() << "';}\n"
    "  bool      print_type_in_spice()const {return true;}\n"
    "  std::string value_name()const  {return \"area\";}\n"
    "  //std::string dev_type()const;   //BASE_SUBCKT\n"
    "  int       max_nodes()const     {return " << d.max_nodes() << ";}\n"
    "  int       min_nodes()const     {return " << d.min_nodes() << ";}\n";
  if (d.max_nodes() != d.min_nodes()) {
    out <<
      "  //int     matrix_nodes()const; //BASE_SUBCKT\n"
      "  //int     net_nodes()const;    //BASE_SUBCKT\n";
  }else{
    out <<
      "  //int     matrix_nodes()const; //BASE_SUBCKT\n"
      "  int       net_nodes()const     {return " << d.max_nodes() << ";}\n";
  }
  out << 
    "  int       int_nodes()const override    {return " 
      << d.circuit().local_nodes().size() << ";}\n"
    "  CARD*     clone()const override        {return new "
      << class_name << "(*this);}\n"
    "  void      precalc_first()override {COMPONENT::precalc_first(); if(subckt()) subckt()->precalc_first();}\n"
    "  void      expand()override;\n"
    "  void      precalc_last() override {COMPONENT::precalc_last(); assert(subckt()); subckt()->precalc_last();}\n"
    "  //void    map_nodes();         //BASE_SUBCKT\n"
    "  //void    tr_begin();          //BASE_SUBCKT\n"
    "  //void    tr_restore();        //BASE_SUBCKT\n";
  if (d.tr_eval().is_empty()) {
    out <<
      "  //void    dc_advance();        //BASE_SUBCKT\n"
      "  //void    tr_advance();        //BASE_SUBCKT\n"
      "  //void    tr_regress();        //BASE_SUBCKT\n"
      "  //bool    tr_needs_eval()const;//BASE_SUBCKT\n"
      "  //void    tr_queue_eval();     //BASE_SUBCKT\n"
      "  //bool    do_tr();             //BASE_SUBCKT\n";
  }else{
    out <<
      "  void      dc_advance() {set_not_converged(); BASE_SUBCKT::dc_advance();}\n"
      "  void      tr_advance() {set_not_converged(); BASE_SUBCKT::tr_advance();}\n"
      "  void      tr_regress() {set_not_converged(); BASE_SUBCKT::tr_regress();}\n"
      "  bool      tr_needs_eval()const;\n"
      "  void      tr_queue_eval()      {if(tr_needs_eval()){q_eval();}}\n"
      "  bool      do_tr();\n";
  }
  out <<
    "  //void    tr_load();           //BASE_SUBCKT\n"
    "  //double  tr_review();         //BASE_SUBCKT\n"
    "  //void    tr_accept();         //BASE_SUBCKT\n"
    "  //void    tr_unload();         //BASE_SUBCKT\n"
    "  double    tr_probe_num(const std::string&)const;\n"
    "  //void    ac_begin();          //BASE_SUBCKT\n"
    "  //void    do_ac();             //BASE_SUBCKT\n"
    "  //void    ac_load();           //BASE_SUBCKT\n"
    "  //XPROBE  ac_probe_ext(CS&)const;//CKT_BASE/nothing\n"
    "public:\n"
    "  static int  count() {return _count;}\n"
    "public: // may be used by models\n";
  for (Function_List::const_iterator
       p = d.function_list().begin();
       p != d.function_list().end();
       ++p) {
    out << "  void " << (**p).name() << ";\n";
  }
  out << 
    "private: // not available even to models\n"
    "  static int _count;\n";
  out <<  "public: // input parameters\n";
  for (Parameter_1_List::const_iterator
       p = d.device().raw().begin();
       p != d.device().raw().end();
       ++p) {untested();
    untested();
    out << "  PARAMETER<" << (**p).type() << "> " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
  out << "public: // calculated parameters\n";
  for (Parameter_1_List::const_iterator
       p = d.device().calculated().begin();
       p != d.device().calculated().end();
       ++p) {
    out << "  " << (**p).type() << " " << (**p).code_name()
	<< ";\t// " << (**p).comment() << '\n';
  }
  out << "public: // netlist\n";
  for (Element_1_List::const_iterator
       p = d.circuit().elements().begin();
       p != d.circuit().elements().end();
       ++p) {
    out << "  COMPONENT* _" << (**p).name() << ";\n";
  }
  out << "private: // node list\n"
    "  enum {";
  for (Port_1_List::const_iterator
       p = d.circuit().req_nodes().begin();
       p != d.circuit().req_nodes().end();
       ++p) {
    if (p != d.circuit().req_nodes().begin()) {
      out << ", ";
    }else{
    }
    out << "n_" << (**p).name();
  }
  for (Port_1_List::const_iterator
       p = d.circuit().opt_nodes().begin();
       p != d.circuit().opt_nodes().end();
       ++p) {
    out << ", ";
    out << "n_" << (**p).name();
  }
  for (Port_1_List::const_iterator
       p = d.circuit().local_nodes().begin();
       p != d.circuit().local_nodes().end();
       ++p) {
    out << ", n_" << (**p).name();
  }
  size_t total_nodes = d.circuit().req_nodes().size() + d.circuit().opt_nodes().size()
    + d.circuit().local_nodes().size();
  out << "};\n"
    "  node_t _nodes[" << total_nodes << "];\n"
    "  std::string port_name(int i)const {\n"
    "    assert(i >= 0);\n"
    "    assert(i < " << d.circuit().req_nodes().size() + d.circuit().opt_nodes().size() << ");\n"
    "    static std::string names[] = {";
  for (Port_1_List::const_iterator
	 p = d.circuit().req_nodes().begin();
       p != d.circuit().req_nodes().end();
       ++p) {
    out << '"' << (**p).name() << "\", ";
  }
  for (Port_1_List::const_iterator
       p = d.circuit().opt_nodes().begin();
       p != d.circuit().opt_nodes().end();
       ++p) {
    out << '"' << (**p).name() << "\", ";
  }
  out << "\"\"};\n"
    "    return names[i];\n"
    "  }\n"
    "};\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
/*--------------------------------------------------------------------------*/
static void make_eval(std::ostream& out, const Eval& e,
		      const String_Arg& dev_name)
{
  std::string class_name = "EVAL_" + dev_name.to_string() + '_' 
    + e.name().to_string();
  out <<
    "class " << class_name << " : public COMMON_COMPONENT {\n"
    "private:\n"
    "  explicit "<< class_name << "(const "<< class_name << "& p)\n"
    "    :COMMON_COMPONENT(p) {}\n"
    "public:\n"
    "  explicit "<< class_name << "(int c=0) :COMMON_COMPONENT(c) {}\n"
    "  bool operator==(const COMMON_COMPONENT& x)const "
		"{return COMMON_COMPONENT::operator==(x);}\n"
    "  COMMON_COMPONENT* clone()const {return new "<<class_name<<"(*this);}\n"
    "  std::string name()const {untested(); return \""<< class_name << "\";}\n"
    "  void tr_eval(ELEMENT*d)const;\n"
    "  bool has_tr_eval()const {return true;}\n"
    "  bool has_ac_eval()const {return false;}\n"
    "};\n"
    "/*--------------------------------------"
    "------------------------------------*/\n";
}
/*--------------------------------------------------------------------------*/
static void make_evals(std::ostream& out, const Device& d)
{
  for (Eval_List::const_iterator
       e = d.eval_list().begin();
       e != d.eval_list().end();
       ++e) {
    make_eval(out, **e, d.name());
  }
}
/*--------------------------------------------------------------------------*/
static void make_tail(std::ostream& out, const File& in)
{
  out << in.h_direct() <<
    "/*--------------------------------------"
    "------------------------------------*/\n"
    "/*--------------------------------------"
    "------------------------------------*/\n"
    "#endif\n";
}
/*--------------------------------------------------------------------------*/
#if 0
void make_h_file(const File& in)
{
  std::string dump_name = in.name();
  { // chop prefix path
    std::string::size_type loc = dump_name.find_last_of(ENDDIR);
    if (loc != std::string::npos) {
      dump_name.erase(0, loc+1);
    }else{itested();
    }
  }

  // open file
  std::ofstream out((dump_name+".h").c_str());
  if (!out) {untested();
    os_error(dump_name);
  }else{
  }

  make_header(out, in, dump_name);

  for (Module_List::const_iterator
	 m = in.module_list().begin(); m != in.module_list().end(); ++m) {
    //make_sdp(out, **m);
    //make_tdp(out, **m);
    //make_model(out, **m);
    //make_common(out, **m);
    //make_evals(out, **m);
    //make_device(out, **m);
  }

  for (Model_List::const_iterator
       m = in.models().begin();
       m != in.models().end();
       ++m) {
    make_sdp(out, **m);
    make_tdp(out, **m);
    make_model(out, **m);
  }
  for (Device_List::const_iterator
       m = in.devices().begin();
       m != in.devices().end();
       ++m) {
    make_common(out, **m);
    make_evals(out, **m);
    make_device(out, **m);
  }
  make_tail(out, in);
}
#endif
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
